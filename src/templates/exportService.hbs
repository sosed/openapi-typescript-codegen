{{>header}}

import { HttpClient } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';

import { ApiMethodBase } from '@cme/oapi3codegen/angular/api-method.base';
import {
    SERVERS_INFO,
    ServersInfo
} from '@cme/oapi3codegen/angular/servers.info.provider';

import { API_ERROR_HANDLER, ApiErrorHandler } from '@cme/oapi3codegen/angular/event-manager.provider';

{{#if imports}}
    {{#each imports}}
        import { {{{this}}} } from '../models/{{{this}}}';
    {{/each}}
{{/if}}

import * as domainSchema from './{{{jsonFile}}}';

export type {{{name}}}Response = {{>result}};

{{#if parameters}}
export type {{{name}}}Parameters = {
{{#each parameters}}
    {{{name}}}{{>isRequired}}: {{>type}};
{{/each}}
};
{{/if}}

{{#if parametersBody}}
export type {{{name}}}Request = {
{{#each parametersBody.properties}}
    {{{name}}}{{>isRequired}}: {{>type}};
{{/each}}
};
{{/if}}

/**
{{#if deprecated}}
  * @deprecated
{{/if}}
{{#if description}}
  * {{{description}}}
{{/if}}
 */
@Injectable()
export class {{{service}}} extends ApiMethodBase<
    {{name}}Response,
    {{#if parametersBody}}{{name}}Request{{else}}null{{/if}},
    {{#if parameters}}{{name}}Parameters{{else}}null{{/if}},
    null
> {

    constructor(
        protected httpClient: HttpClient,
        @Inject(API_ERROR_HANDLER) protected errorHandler: ApiErrorHandler,
        @Inject(SERVERS_INFO) protected serversInfo: ServersInfo,
    ) {
        super(httpClient, errorHandler, serversInfo, domainSchema);
    }

    protected get method(): '{{{method}}}' {
        return '{{{method}}}';
    }

    /**
    * Path template, example: `/some/path/{id}`.
    * @returns {string}
    */
    protected get pathTemplate(): string {
        return `{{{path}}}`;
    }

    /**
    * Parameters in a query.
    * @returns {string[]}
    */
    protected get queryParams(): string[] {
        return [{{queryParams}}];
    }

    /**
    * API servers.
    */
    protected get servers(): string[] {
        return ['http://lk.cm.local/api/site/'];
    }

    /**
    * Complete domain API schema (OAS3) with library
    * of models.
    */
    protected get domainSchema(): any {
        return domainSchema;
    }

    /**
    * JSON Schemas using for validations at requests.
    */
    protected get schema() {
        return {
            response: {{~#if schema.response~}} {{ schema.response }} {{~else~}} null{{~/if~}},
            request: {{~#if schema.request~}} {{ schema.request }} {{~else~}} null{{~/if~}},
            params: {{~#if schema.params~}} {{ schema.params }} {{~else~}} null{{~/if~}},
        }
    }
}
